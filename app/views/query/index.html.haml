%form
  %select{:id => "source"}
    %option{:value => "total_rev"} Total Revenue
    %option{:value => "bookings_rev"} Bookings Revenue
    %option{:value => "loots_rev"} Loots Revenue
    %option{:value => "bookings"} Number of Bookings
    %option{:value => "loots"} Number of Loots
  %select{:id => "time_format"}
    %option{:value => "year"} Year
    %option{:value => "month"} Month
    %option{:value => "day"} Day
    %option{:value => "hour"} Hour
  %select{:id => "location"}
    %option{:value => "all_cities"} All Cities
    %option{:value => "nyc"} New York
    %option{:value => "la"} Los Angeles
    %option{:value => "chi"} Chicago
    %option{:value => "sfo"} San Francisco
  Start date:
  %input{:type => " ", :class => "datepicker", :id => "start_date"}
  End date:
  %input{:type => "text", :class => "datepicker", :id => "end_date"} 
  %button{:type => "button", :class => "button"}Submit

%div{:id => "chart1"}
  %svg{:style => "height: 500px;"}

:javascript
  $(".button").click(function(){
    console.log($("#start_date").val());
    var options = {
      type: "GET",
      url: "/query/fetch",
      data: {
        source: $("#source").val(),
        time_format: $("#time_format").val(),
        start_date: $("#start_date").val(),
        end_date: $("#end_date").val(),
      },
      dataType: "json",
      success: function(data){
        var xvals = new Array;
        var yvals = new Array;
        for (var i = 0; i < data.length; i++){
          xvals[i] = new Date(Date.parse(data[i].counttime));
          yvals[i] = data[i].countnum;
          switch($("#time_format").val()){
            case "hour":
              xvals[i] = xvals[i].getHours();
              break;
            case "day":
              xvals[i] = xvals[i].getFullYear() + "-" + (xvals[i].getMonth() + 1) + "-" + (xvals[i].getDate()+1);
              break;
            case "month":
              xvals[i] = xvals[i].getFullYear() + "-" + (xvals[i].getMonth() + 1);
              break;
            case "year":
              xvals[i] = xvals[i].getFullYear() + 1;
              break;
            default:
              console.log("fail");
          };
        };
        addGraph(xvals, yvals);
      },
      error: function(){
        console.log("error");
      }
    };
    $.ajax(options);
  });

  function addGraph(xvals, yvals){
    var chart = nv.models.discreteBarChart()
      .x(function(d) { return d.label })
      .y(function(d) { return d.value })
      .staggerLabels(true)
      //.staggerLabels(historicalBarChart[0].values.length > 8)
      .tooltips(false)
      .showValues(true);

    chart.yAxis
      .axisLabel('Count')
      .tickFormat(d3.format('g'));

    d3.select('#chart1 svg')
        .datum(datafun(xvals, yvals))
      .transition().duration(500)
        .call(chart);

    nv.utils.windowResize(chart.update);

    return chart;
  }

  function datafun(xvals, yvals){
    var testdata = [];
    for (var i = 0; i < xvals.length; i++) {
      testdata.push({label: xvals[i], series: 0, value: yvals[i]}); 
    }
    return [
    {
      area: false,
      values: testdata,
      key: "testdata",
      color: "#ff7f0e"
    }
    ];
  }

:javascript
  function oldgraph(xvals, yvals){ 
    var margin = {top: 30, right: 10, bottom: 200, left: 70}
        width = 960 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

    var y = d3.scale.linear()
        .domain([0, Math.abs(d3.max(yvals))])
        .range([height,0])
        .nice();

    var x = d3.scale.ordinal()
        .domain(d3.range(xvals.length))
        .rangeRoundBands([0, width]);

    var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left");

    var xAxis = d3.svg.axis()
        .scale(x)
        .tickValues(xvals)
        .orient("bottom");

    var svg = d3.select("body").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    svg.selectAll(".bar")
        .data(yvals)
        .enter().append("rect")
        .attr("y", function(d) { return y(Math.max(0, d)); })
        .attr("x", function(d, i) { return x(i); })
        .attr("height", function(d) { return Math.abs(y(d) - y(0)); })
        .attr("width", x.rangeBand());

    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis);

    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0, " + height + ")")
        .call(xAxis)
        .selectAll("text")  
            .style("text-anchor", "end")
            .attr("dx", -10)
            .attr("dy", "1em")
            .attr("transform", function(d) {
                return "rotate(-65)" 
                });

    // svg.selectAll("text")
    //     .attr("class", "label")
    //     .data(yvals)
    //     .enter().append("text")
    //     .attr("y", function(d) { return d; })
    //     .attr("x", function(d,i) { return x(i) + x.rangeBand() / 2; })
    //     .attr("dy", 20)
    //     .text(String);

    svg.append("text")
        .attr("class", "y label")
        .attr("text-anchor", "end")
        .attr("x", - height * .5)
        .attr("dy", - 60)
        .attr("transform", "rotate(-90)")
        .text("# of Bookings");

    svg.append("text")
        .attr("class", "x label")
        .attr("text-anchor", "end")
        .attr("y", height+50)
        .attr("dx", width/2)
        .text("Time");

    svg. append("text")
        .attr("class", "title")
        .attr("text-anchor", "middle")
        .attr("x", (width + margin.left + margin.right)/2)
        .text("Bookings frequency by time of day")
  }
  

:javascript
  $(function() {
    $( ".datepicker" ).datepicker({
      dateFormat: "yy-mm-dd"
    });
  });